use('DBConfig_co')
 db.createCollection( "ConfigTemplateTest",
  {
    capped: false
  }
)
   
db.getCollection("ConfigTemplateTest").insert({
    "Nombre": "DefaultCountry",
    "Valor": "co",
    "Descripcion": "Default Country",
    "Tipo": "Text",
    "FechaModificacion": "2022-01-05T9:20:14.974Z"
})

   db.getCollection("ConfigTemplateTest").insert({
    "Nombre": "CRON_SONDA_JOB",
    "Valor": "*/1 * * * *",
    "Descripcion": "cron task example",
    "Tipo": "Text",
    "FechaModificacion": "2022-01-05T9:20:14.974Z"
})

   db.getCollection("ConfigTemplateTest").insert({
    "Nombre": "Requestqueue",
    "Valor": "request_createNote_queue_local",
    "Descripcion": "request createNote queue local",
    "Tipo": "Text",
    "FechaModificacion": "2022-01-05T9:20:14.974Z"
})

   db.getCollection("ConfigTemplateTest").insert({
    "Nombre": "Requesttopic",
    "Valor": "request_createNote_topic_local",
    "Descripcion": "request createNote topic local",
    "Tipo": "Text",
    "FechaModificacion": "2022-01-05T9:20:14.974Z"
})

   db.getCollection("ConfigTemplateTest").insert({
    "Nombre": "HealthChecksEndPoint",
    "Valor": "/health",
    "Descripcion": "health",
    "Tipo": "Text",
    "FechaModificacion": "2022-01-05T9:20:14.974Z"
})

   db.getCollection("ConfigTemplateTest").insert({
    "Nombre": "HttpPort",
    "Valor": "80",
    "Descripcion": "port",
    "Tipo": "Text",
    "FechaModificacion": "2022-01-05T9:20:14.974Z"
})


   db.getCollection("ConfigTemplateTest").insert({
    "Nombre": "GRPCPort",
    "Valor": "5092",
    "Descripcion": "port",
    "Tipo": "Text",
    "FechaModificacion": "2022-01-05T9:20:14.974Z"
})




db.getCollection("ConfigTemplateTest").insert({
    "Nombre": "ServiceExceptions",
    "Valor": [{
        "Id": "NotControlledException",
        "Code": "409.000",
        "Message": "Excepción de negocio no controlada.",
        "Description": "Este error se genera cuando una excepción no controlada en alguna operación dentro del flujo de la petición."
      },
      {
        "Id": "InvalidNotesId",
        "Code": "409.001",
        "Message": "El id del usuario no es valido.",
        "Description": "Este error se genera cuando se envía un valor errado en el parámetro Id para la consulta de información de usuarios."
      },
      {
        "Id": "InvalidNoteListsId",
        "Code": "409.004",
        "Message": "El id del grupo de usuarios no es valido.",
        "Description": "Este error se genera cuando se envía un valor errado en el parámetro Id para la consulta de información de grupos de usuarios."
      },
      {
        "Id": "RecordNotFound",
        "Code": "409.006",
        "Message": "No existe el registro.",
        "Description": "Este error se genera cuando no se encuentra resultado con el/los parámetro(s) enviados en la petición de consulta."
      }
	  ],
	"Descripcion": "ServiceExceptions",
    "Tipo": "List",
    "FechaModificacion": ISODate("2022-01-14T07:00:00.974-05:00")
})

db.getCollection("ConfigTemplateTest").insert({
    "Nombre": "ServiceExceptionByDefault",
    "Valor": [{
      "Id": "DefaultException",
      "Code": "409.500",
      "Message": "Error desconocido.",
      "Description": "Este error se genera cuando no existe la propiedad en el archivo de configuración del servicio (appsettings) que contiene el listado de códigos de error."
    }],
    "Descripcion": "ServiceExceptionByDefault",
    "Tipo": "List",
    "FechaModificacion": ISODate("2022-01-14T07:00:00.974-05:00")
})

